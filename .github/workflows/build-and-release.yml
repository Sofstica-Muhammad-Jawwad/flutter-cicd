name: Build And Release

on:
  create:
    branches:
      - 'release/*'  # Trigger only for branches starting with 'release/'

permissions:
  contents: write  # Allow push to the repository
  actions: read    # Allow reading action logs (optional)

jobs:
  print-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: If branch doesn't start with 'release/'
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ ! "$BRANCH_NAME" =~ ^release/ ]]; then
            echo "This is not a release branch, exiting..."
            echo "is_release_android_upload=false" >> $GITHUB_ENV  # Set environment variable to false
            exit 0
          else
            echo "ðŸŽ‰ðŸŽ‰ðŸŽ‰ New release branch created: $GITHUB_REF ðŸŽ‰ðŸŽ‰ðŸŽ‰"
        
            if [[ "$BRANCH_NAME" == *"-android"* ]]; then
              echo "The branch contains 'android', running the new job."
              echo "is_release_android_upload=true" >> $GITHUB_ENV  # Set environment variable to true
            else
              echo "The branch does not contain 'android'."
              echo "is_android_branch=false" >> $GITHUB_ENV  # Set environment variable to false
            fi
          fi

      - name: Merge release branch into main
        if: ${{ env.is_release_android_upload == 'true' }}  # Only run for release branches
        run: |
          echo "ðŸŽ‰ðŸŽ‰ðŸŽ‰ Merging ANDROID RELEASE BRANCH into MAIN ðŸŽ‰ðŸŽ‰ðŸŽ‰"

          # Extract the current branch name from $GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Define the string to remove from the branch name
          REMOVE_STRING="-android"

          # Ensure the branch is valid and contains '-android'
          if [[ "$BRANCH_NAME" == *"$REMOVE_STRING"* ]]; then
            NEW_BRANCH_NAME="${BRANCH_NAME/$REMOVE_STRING/}"
            echo "Branch name before: $BRANCH_NAME"
            echo "Branch name after removing '$REMOVE_STRING': $NEW_BRANCH_NAME"
       
            git fetch --all
            echo "Merging $BRANCH_NAME into main..."

            # Checkout the target branch main for merging
            git checkout main
            git pull origin main  # Ensure it's up-to-date with the remote

            # Merge the release branch into main
            git merge $BRANCH_NAME --no-ff --allow-unrelated-histories -X theirs
            echo "Merge complete."

            # Push the changes to the main branch
            git push origin main  # Push the changes to the target branch
          fi

      - name: Rename release branch and delete old branch
        if: ${{ env.is_release_android_upload == 'true' }}  # Only run for release branches
        run: |
          echo "ðŸŽ‰ðŸŽ‰ðŸŽ‰ Renaming release branch and deleting old branch ðŸŽ‰ðŸŽ‰ðŸŽ‰"
          
          # Extract the current branch name from $GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          REMOVE_STRING="-android"

          if [[ "$BRANCH_NAME" == *"$REMOVE_STRING"* ]]; then
            NEW_BRANCH_NAME="${BRANCH_NAME/$REMOVE_STRING/}"
            echo "Branch name before: $BRANCH_NAME"
            echo "Branch name after removing '$REMOVE_STRING': $NEW_BRANCH_NAME"
          
            # Push the new branch to the remote repository
            git push origin $NEW_BRANCH_NAME

            # Set the upstream branch for the renamed branch
            git push --set-upstream origin $NEW_BRANCH_NAME

            # Delete the old branch from the remote
            git push origin --delete $BRANCH_NAME

            # Optional: If you want to delete the local old branch
            git branch -d $BRANCH_NAME
          fi
