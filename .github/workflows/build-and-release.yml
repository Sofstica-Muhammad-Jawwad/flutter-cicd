name: Build And Release

on:
  create:
    branches:
      - 'release/*'  # Trigger only for branches starting with 'release/'

jobs:
  print-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: If branch dont starts with 'release/'
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ ! "$BRANCH_NAME" =~ ^release/ ]]; then
            echo "This is not a release branch, exiting..."
             echo "is_release_android_upload=false" >> $GITHUB_ENV  # Set environment variable to false
            exit 0
          else
             echo "ðŸŽ‰ðŸŽ‰ðŸŽ‰ New release branch created: $GITHUB_REF ðŸŽ‰ðŸŽ‰ðŸŽ‰"
        
             if [[ "$BRANCH_NAME" == *"-android"* ]]; then
             echo "The branch contains 'android', running the new job."
             echo "is_release_android_upload=true" >> $GITHUB_ENV  # Set environment variable to false
             else
             echo "The branch does not contain 'android'."
             echo "is_android_branch=false" >> $GITHUB_ENV  # Set environment variable to false
             fi
          fi

      - name: Print a beautiful line  android release(Release Branch)
        if: ${{ env.is_release_android_upload == 'true' }}  # Only run for release branches
        run: |
          echo "ðŸŽ‰ðŸŽ‰ðŸŽ‰ ANDROID RELEASE BRANCH  ðŸŽ‰ðŸŽ‰ðŸŽ‰"

          # Extract the current branch name from $GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Define the string to remove from the branch name
          REMOVE_STRING="-android"

          if [[ "$BRANCH_NAME" == *"$REMOVE_STRING"* ]]; then
            NEW_BRANCH_NAME="${BRANCH_NAME/$REMOVE_STRING/}"
            echo "Branch name before: $BRANCH_NAME"
            echo "Branch name after removing '$REMOVE_STRING': $NEW_BRANCH_NAME"
            echo "new_branch_name=$NEW_BRANCH_NAME" >> $GITHUB_ENV  # Set new branch name in environment variable
            
            echo "New branch name: $NEW_BRANCH_NAME"

            echo Fetch all branches to ensure we're working with the latest information
            git fetch --all

            echo Create a new branch from the current branch
            git checkout -b "$NEW_BRANCH_NAME"

            echo Push the new branch to the remote repository
            git push origin "$NEW_BRANCH_NAME"

            echo Delete the old branch from remote
            git push origin --delete $BRANCH_NAME

            echo Set the upstream branch for the renamed branch
            git push --set-upstream origin "$NEW_BRANCH_NAME"

            echo Checkout the target branch (main) for merging
            git fetch origin
            git checkout main  # Or replace with your target branch name
            git pull origin main  # Ensure it's up-to-date with the remote

            echo Merge the "${{ env.new_branch_name }}" renamed branch into the target branch
            echo  git merge "$NEW_BRANCH_NAME" --no-ff -m "Merge "${{ env.new_branch_name }}" into main"
            echo git push origin main  # Push the changes to the target branch
          fi
   
 